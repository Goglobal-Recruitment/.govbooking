const express = require('express');
const fs = require('fs');
const XLSX = require('xlsx');
const bodyParser = require('body-parser');
const app = express();
const PORT = 3000;

app.use(bodyParser.json());
app.use(express.static('public')); // your frontend folder

const filePath = './bookings.xlsx';

// Initialize Excel file if not exists
if(!fs.existsSync(filePath)){
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet([]);
  XLSX.utils.book_append_sheet(wb, ws, 'Bookings');
  XLSX.writeFile(wb, filePath);
}

// Helper: read bookings
function readBookings(){
  const wb = XLSX.readFile(filePath);
  const ws = wb.Sheets['Bookings'];
  return XLSX.utils.sheet_to_json(ws);
}

// Helper: write bookings
function writeBooking(booking){
  const bookings = readBookings();
  bookings.push(booking);
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(bookings);
  XLSX.utils.book_append_sheet(wb, ws, 'Bookings');
  XLSX.writeFile(wb, filePath);
}

// Auth endpoint
app.post('/auth', (req,res)=>{
  const {name,email,phone} = req.body;
  if(name && email && phone){
    res.json({authorized:true});
  } else {
    res.json({authorized:false});
  }
});

// Availability endpoint
app.get('/availability', (req,res)=>{
  const date = req.query.date;
  const bookings = readBookings();
  const bookedTimes = bookings.filter(b=>b.date === date).map(b=>b.time);
  res.json({bookedTimes});
});

// Booking endpoint
app.post('/book', (req,res)=>{
  const {name,email,phone,date,time} = req.body;
  const bookings = readBookings();
  const exists = bookings.find(b=>b.date===date && b.time===time);
  if(exists){
    return res.json({success:false, message:"Slot already booked"});
  }
  writeBooking({name,email,phone,date,time});
  res.json({success:true});
});

app.listen(PORT, ()=>console.log(`Server running on port ${PORT}`));
